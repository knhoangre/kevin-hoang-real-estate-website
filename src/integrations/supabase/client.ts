// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// This should only be used in client-side code
if (typeof window === 'undefined') {
  throw new Error('This module should only be used in client-side code');
}

// Use Vite's import.meta.env for environment variables
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Check if we have valid Supabase credentials
const hasValidSupabaseConfig = SUPABASE_URL && 
  SUPABASE_ANON_KEY && 
  SUPABASE_URL !== 'placeholder' && 
  SUPABASE_ANON_KEY !== 'placeholder' &&
  SUPABASE_URL.startsWith('http');

// Create a mock client if Supabase is not configured
const createMockClient = () => {
  console.warn('Supabase not configured. Using mock client.');
  return {
    auth: {
      signInWithPassword: async () => ({ error: { message: 'Supabase not configured' } }),
      signUp: async () => ({ error: { message: 'Supabase not configured' } }),
      signOut: async () => ({ error: { message: 'Supabase not configured' } }),
      getSession: async () => ({ data: { session: null }, error: null }),
      onAuthStateChange: () => ({ data: { subscription: null } }),
    },
    from: () => ({
      select: () => ({ data: [], error: null }),
      insert: () => ({ data: null, error: { message: 'Supabase not configured' } }),
      update: () => ({ data: null, error: { message: 'Supabase not configured' } }),
      delete: () => ({ data: null, error: { message: 'Supabase not configured' } }),
    }),
  } as any;
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = hasValidSupabaseConfig 
  ? createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
      auth: {
        autoRefreshToken: true,
        persistSession: true,
        detectSessionInUrl: true,
        flowType: 'pkce', // Use PKCE flow for better security
      },
      global: {
        headers: {
          'X-Client-Info': 'real-estate-website',
        },
      },
    })
  : createMockClient();

// Add error handling wrapper
export const safeSupabase = {
  ...supabase,
  auth: {
    ...supabase.auth,
    signInWithPassword: async (credentials: { email: string; password: string }) => {
      try {
        return await supabase.auth.signInWithPassword(credentials);
      } catch (error) {
        console.error('Authentication error:', error);
        throw new Error('Authentication failed. Please try again.');
      }
    },
    signUp: async (credentials: { email: string; password: string }) => {
      try {
        return await supabase.auth.signUp(credentials);
      } catch (error) {
        console.error('Signup error:', error);
        throw new Error('Signup failed. Please try again.');
      }
    },
  },
};